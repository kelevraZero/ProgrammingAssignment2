add2 <- function (x,y)
{
x+y
}
add2 <- function (x,y)
{
x+y
}
above10 <- function(x)
{
use <- x > 10
x[use]
}
above <- function(x,n)
{
use <- x > n
x[use]
}
above(20,10)
above(20,30)
above(20,1)
x <- 1:20
above(20,1)
above(x,9)
colmean <- function(y)
{
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc)
{
means[i] <- mean(y[,i])
}
}
airquality
colmean(airquality)
colmean <- function(y)
{
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc)
{
means[i] <- mean(y[,i])
}
means
}
colmean(airquality)
colmean(airquality)
y <- airquality
y
ncol(y)
numeric(ncol(y))
numeric(10)
colmean <- function(y, removeNA = TRUE)
{
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc)
{
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
colmean <- function(y, removeNA = TRUE)
{
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc)
{
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
colmean(y)
setwd("~/GitHub/ProgrammingAssignment2")
x = matrix()
View(x)
x = matrix(numeric(),10,10)
x = matrix(numeric(2),10,10)
View(x)
x = matrix(rnorm(),10,10)
x = matrix(rnorm(100),10,10)
View(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x = matrix(rnorm(100),10,10)
cacheSolve(x)
View(x)
cacheSolve(x = matrix())
makeCacheMatrix(x)
x = matrix(rnorm(100),10,10)
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix(x)
View(y)
x = matrix(rnorm(100),10,10)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(x)
cacheSolve(makeCacheMatrix)
x <- matrix(rnorm(100),10,10)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x <- matrix(rnorm(100),10,10)
y <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(y)
x1 <- matrix(rnorm(100),10,10)
y1 <- makeCacheMatrix(x)
cacheSolve(y1)
x1 <- matrix(rnorm(100),10,10)
y1 <- makeCacheMatrix(x)
cacheSolve(y1)
x1 <- matrix(rnorm(100),10,10)
y1 <- makeCacheMatrix(x)
cacheSolve(y1)
cacheSolve(y)
x1 <- matrix(rnorm(100),10,10)
y1 <- makeCacheMatrix(x1)
cacheSolve(y1)
x1 <- matrix(rnorm(100),10,10)
y1 <- makeCacheMatrix(x1)
cacheSolve(y1)
x1 <- matrix(rnorm(10),10,10)
y1 <- makeCacheMatrix(x1)
cacheSolve(y1)
x1 <- matrix(rnorm(10),5,5)
y1 <- makeCacheMatrix(x1)
cacheSolve(y1)
x1 <- matrix(rnorm(10),6,6)
y1 <- makeCacheMatrix(x1)
cacheSolve(y1)
x1 <- matrix(rnorm(100),6,6)
y1 <- makeCacheMatrix(x1)
cacheSolve(y1)
cacheSolve(y1)
cacheSolve(y)
x <- matrix(rnorm(100),10,10)
cacheSolve(y)
x <- matrix(rnorm(100),10,10)
cacheSolve(y)
y <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(y)
